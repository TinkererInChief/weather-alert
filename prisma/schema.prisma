generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  phone           String?       @unique
  emailVerified   DateTime?
  image           String?
  role            String        @default("VIEWER")
  organizationId  String?
  isActive        Boolean       @default(true)
  lastLoginAt     DateTime?
  approvalStatus  String        @default("pending")
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  accounts        Account[]
  sessions        Session[]
  organization    Organization? @relation(fields: [organizationId], references: [id])
  auditLogs       AuditLog[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SmsOtp {
  id         String    @id @default(cuid())
  phone      String
  tokenHash  String
  expires    DateTime
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())
  consumedAt DateTime?

  @@index([phone])
  @@map("sms_otps")
}

model Contact {
  id                   String               @id @default(cuid())
  name                 String
  email                String?
  phone                String?              @unique
  whatsapp             String?
  language             String               @default("en")
  timezone             String               @default("UTC")
  elevationMeters      Float?
  isCoastalResident    Boolean              @default(false)
  notificationChannels Json                 @default("[]")
  notificationSettings Json                 @default("{}")
  active               Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  groupMemberships     ContactGroupMember[]
  deliveryLogs         DeliveryLog[]
  vesselAssignments    VesselContact[]

  @@map("contacts")
}

model ContactGroup {
  id          String               @id @default(cuid())
  name        String
  description String?
  metadata    Json                 @default("{}")
  createdAt   DateTime             @default(now())
  members     ContactGroupMember[]

  @@map("contact_groups")
}

model ContactGroupMember {
  contactId String
  groupId   String
  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  group     ContactGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([contactId, groupId])
  @@map("contact_group_members")
}

model AlertZone {
  id        String   @id @default(cuid())
  name      String
  type      String
  zoneCode  String?  @unique
  priority  Int      @default(1)
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@map("alert_zones")
}

model EarthquakeEvent {
  id              String         @id @default(cuid())
  sourceId        String         @unique
  source          String
  magnitude       Float
  depth           Float?
  latitude        Float
  longitude       Float
  location        String
  occurredAt      DateTime
  tsunamiPossible Boolean        @default(false)
  rawData         Json           @default("{}")
  status          String         @default("active")
  processed       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tsunamiAlerts   TsunamiAlert[]
  alertJobs       AlertJob[]

  @@map("earthquake_events")
}

model TsunamiAlert {
  id                   String           @id @default(cuid())
  eventId              String
  source               String
  alertType            String
  severityLevel        Int
  estimatedWaveHeight  Float?
  estimatedArrivalTime DateTime?
  affectedZones        String[]         @default([])
  sourceEarthquakeId   String?
  cancellationTime     DateTime?
  rawData              Json             @default("{}")
  createdAt            DateTime         @default(now())
  sourceEarthquake     EarthquakeEvent? @relation(fields: [sourceEarthquakeId], references: [id])
  alertJobs            AlertJob[]

  @@map("tsunami_alerts")
}

model MessageTemplate {
  id        String   @id @default(cuid())
  name      String
  type      String
  channel   String
  language  String   @default("en")
  subject   String?
  content   String
  variables Json     @default("[]")
  version   Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, channel, language, version])
  @@map("message_templates")
}

model AlertJob {
  id                String           @id @default(cuid())
  type              String
  eventType         String
  earthquakeEventId String?
  tsunamiAlertId    String?
  severity          Int
  priority          Int              @default(1)
  targetingSnapshot Json
  status            String           @default("pending")
  scheduledFor      DateTime         @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  errorMessage      String?
  metadata          Json             @default("{}")
  createdAt         DateTime         @default(now())
  earthquakeEvent   EarthquakeEvent? @relation(fields: [earthquakeEventId], references: [id])
  tsunamiAlert      TsunamiAlert?    @relation(fields: [tsunamiAlertId], references: [id])
  deliveryLogs      DeliveryLog[]

  @@map("alert_jobs")
}

model DeliveryLog {
  id                String    @id @default(cuid())
  alertJobId        String
  contactId         String
  channel           String
  provider          String
  status            String
  providerMessageId String?
  errorMessage      String?
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  createdAt         DateTime  @default(now())
  alertJob          AlertJob  @relation(fields: [alertJobId], references: [id], onDelete: Cascade)
  contact           Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("delivery_logs")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@map("organizations")
}

model AuditLog {
  id             String   @id @default(cuid())
  userId         String?
  action         String
  resource       String
  resourceId     String?
  metadata       Json     @default("{}")
  ipAddress      String?
  userAgent      String?
  eventId        String?  @unique @default(uuid())
  organizationId String?
  actorRole      String?
  actorEmail     String?
  sessionId      String?
  requestId      String?
  traceId        String?
  service        String?
  env            String?
  version        Int?
  method         String?
  path           String?
  httpStatus     Int?
  success        Boolean?
  severity       String?
  category       String?
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])

  @@index([action, createdAt])
  @@index([resource, resourceId])
  @@index([userId, createdAt])
  @@index([organizationId, createdAt])
  @@index([requestId])
  @@map("audit_logs")
}

model AlertLog {
  id               String   @id @default(cuid())
  earthquakeId     String
  magnitude        Float
  location         String
  latitude         Float?
  longitude        Float?
  depth            Float?
  timestamp        DateTime @default(now())
  contactsNotified Int      @default(0)
  success          Boolean  @default(false)
  errorMessage     String?
  dataSources      String[] @default([])
  primarySource    String?
  sourceMetadata   Json?    @default("{}")
  createdAt        DateTime @default(now())

  @@map("alert_logs")
}

model EarthquakeCache {
  id           String   @id @default(cuid())
  earthquakeId String   @unique
  magnitude    Float
  location     String
  latitude     Float?
  longitude    Float?
  depth        Float?
  timestamp    DateTime
  processed    Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("earthquake_cache")
}

model VoiceCall {
  id          String    @id @default(cuid())
  callSid     String    @unique
  phoneNumber String
  alertType   String
  status      String
  duration    Int?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@map("voice_calls")
}

model BulkCallJob {
  id              String   @id @default(cuid())
  alertType       String
  totalContacts   Int
  successfulCalls Int
  failedCalls     Int
  customMessage   String?
  createdAt       DateTime @default(now())

  @@map("bulk_call_jobs")
}

model SystemSettings {
  id        String   @id @default("global")
  settings  Json     @default("{}")
  updatedAt DateTime @updatedAt
  updatedBy String?

  @@map("system_settings")
}

model HealthSnapshot {
  id        String        @id @default(cuid())
  service   HealthService
  status    HealthStatus
  latencyMs Int?
  error     String?
  createdAt DateTime      @default(now())

  @@index([service, createdAt])
  @@map("health_snapshots")
}

model HealthEvent {
  id        String          @id @default(cuid())
  service   HealthService?
  eventType HealthEventType
  severity  HealthStatus    @default(warning)
  message   String
  oldStatus HealthStatus?
  newStatus HealthStatus?
  metadata  Json            @default("{}")
  createdAt DateTime        @default(now())

  @@index([createdAt])
  @@index([service, createdAt])
  @@map("health_events")
}

model MaintenanceWindow {
  id               String   @id @default(cuid())
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  affectedServices String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([startTime, endTime])
  @@map("maintenance_windows")
}

model Vessel {
  id                String           @id @default(cuid())
  mmsi              String           @unique
  imo               String?          @unique
  name              String
  callsign          String?
  vesselType        String
  flag              String?
  length            Float?
  width             Float?
  height            Float?
  draught           Float?
  grossTonnage      Float?
  operator          String?
  owner             String?
  active            Boolean          @default(true)
  lastSeen          DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  buildYear         Int?             @map("build_year")
  manager           String?
  enrichedAt        DateTime?        @map("enriched_at") @db.Timestamptz(6)
  enrichmentSource  String?          @map("enrichment_source")
  positions         VesselPosition[]
  alerts            VesselAlert[]
  contacts          VesselContact[]

  @@index([mmsi])
  @@index([active])
  @@index([vesselType])
  @@map("vessels")
}

model VesselPosition {
  id                String    @default(cuid())
  vesselId          String
  latitude          Float
  longitude         Float
  speed             Float?
  course            Float?
  heading           Float?
  navStatus         String?
  destination       String?
  eta               DateTime?
  draught           Float?
  captain           String?
  timestamp         DateTime
  dataSource        String    @default("marinetraffic")
  createdAt         DateTime  @default(now())
  rateOfTurn        Float?    @map("rate_of_turn")
  positionAccuracy  Boolean?  @map("position_accuracy")
  vessel            Vessel    @relation(fields: [vesselId], references: [id], onDelete: Cascade)

  @@id([id, timestamp])
  @@index([vesselId, timestamp])
  @@index([timestamp])
  @@map("vessel_positions")
}

model VesselAlert {
  id             String    @id @default(cuid())
  vesselId       String
  type           String
  severity       String
  eventId        String?
  eventType      String?
  riskLevel      String
  tsunamiETA     Int?
  waveHeight     Float?
  waterDepth     Float?
  distance       Float?
  recommendation String
  actions        String[]  @default([])
  aiContext      String?
  acknowledged   Boolean   @default(false)
  acknowledgedAt DateTime?
  acknowledgedBy String?
  resolvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  vessel         Vessel    @relation(fields: [vesselId], references: [id], onDelete: Cascade)

  @@index([vesselId, createdAt])
  @@index([type, severity])
  @@index([riskLevel])
  @@map("vessel_alerts")
}

model VesselContact {
  id        String   @id @default(cuid())
  vesselId  String
  contactId String
  role      String
  primary   Boolean  @default(false)
  createdAt DateTime @default(now())
  vessel    Vessel   @relation(fields: [vesselId], references: [id], onDelete: Cascade)
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([vesselId, contactId])
  @@index([vesselId])
  @@index([contactId])
  @@map("vessel_contacts")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum HealthService {
  database
  redis
  sms
  email
  usgs
  noaa
  emsc
  jma
  ptwc
  iris
  whatsapp
  voice
}

enum HealthStatus {
  healthy
  warning
  critical
}

enum HealthEventType {
  status_change
  error
  recovery
  deploy
}
