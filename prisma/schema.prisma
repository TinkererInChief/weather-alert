generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication models for passwordless login (NextAuth)
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  phone         String?  @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model SmsOtp {
  id         String   @id @default(cuid())
  phone      String
  tokenHash  String
  expires    DateTime
  attempts   Int      @default(0)
  createdAt  DateTime @default(now())
  consumedAt DateTime?

  @@index([phone])
  @@map("sms_otps")
}

// Enhanced contact model with geographic and preference data
model Contact {
  id                    String    @id @default(cuid())
  name                  String
  email                 String?
  phone                 String?   @unique
  whatsapp              String?
  language              String    @default("en")
  timezone              String    @default("UTC")
  elevationMeters       Float?
  isCoastalResident     Boolean   @default(false)
  notificationChannels  Json      @default("[]") // ["sms", "email", "whatsapp", "voice"]
  notificationSettings  Json      @default("{}") // preferences per channel/severity
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relationships
  groupMemberships      ContactGroupMember[]
  deliveryLogs          DeliveryLog[]
  
  @@map("contacts")
}

// Contact groups for organization
model ContactGroup {
  id          String               @id @default(cuid())
  name        String
  description String?
  metadata    Json                 @default("{}")
  createdAt   DateTime             @default(now())
  
  // Relationships
  members     ContactGroupMember[]
  
  @@map("contact_groups")
}

model ContactGroupMember {
  contactId String
  groupId   String
  
  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  group     ContactGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@id([contactId, groupId])
  @@map("contact_group_members")
}

// Alert zones for geographic targeting
model AlertZone {
  id              String    @id @default(cuid())
  name            String
  type            String    // "tsunami_zone", "earthquake_zone", "evacuation_zone"
  zoneCode        String?   @unique
  priority        Int       @default(1)
  metadata        Json      @default("{}")
  createdAt       DateTime  @default(now())
  
  // Note: PostGIS geometry fields will be added via raw SQL migration
  
  @@map("alert_zones")
}

// Enhanced event tracking
model EarthquakeEvent {
  id              String    @id @default(cuid())
  sourceId        String    @unique
  source          String    // "usgs", "emsc"
  magnitude       Float
  depth           Float?
  latitude        Float
  longitude       Float
  location        String
  occurredAt      DateTime
  tsunamiPossible Boolean   @default(false)
  rawData         Json      @default("{}")
  status          String    @default("active") // "active", "updated", "cancelled"
  processed       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  tsunamiAlerts   TsunamiAlert[]
  alertJobs       AlertJob[]
  
  @@map("earthquake_events")
}

// Tsunami alert tracking
model TsunamiAlert {
  id                    String    @id @default(cuid())
  eventId               String
  source                String    // "noaa", "ptwc", "jma"
  alertType             String    // "watch", "advisory", "warning", "emergency"
  severityLevel         Int       // 1-5 scale
  estimatedWaveHeight   Float?
  estimatedArrivalTime  DateTime?
  affectedZones         String[]  @default([])
  sourceEarthquakeId    String?
  cancellationTime      DateTime?
  rawData               Json      @default("{}")
  createdAt             DateTime  @default(now())
  
  // Relationships
  sourceEarthquake      EarthquakeEvent? @relation(fields: [sourceEarthquakeId], references: [id])
  alertJobs             AlertJob[]
  
  @@map("tsunami_alerts")
}

// Message templates
model MessageTemplate {
  id          String    @id @default(cuid())
  name        String
  type        String    // "earthquake", "tsunami", "test"
  channel     String    // "sms", "email", "whatsapp", "voice"
  language    String    @default("en")
  subject     String?   // for email
  content     String
  variables   Json      @default("[]")
  version     Int       @default(1)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([name, channel, language, version])
  @@map("message_templates")
}

// Alert job queue
model AlertJob {
  id                  String    @id @default(cuid())
  type                String    // "earthquake", "tsunami", "test", "cancel"
  eventType           String    // "earthquake", "tsunami"
  earthquakeEventId   String?
  tsunamiAlertId      String?
  severity            Int
  priority            Int       @default(1)
  targetingSnapshot   Json      // snapshot of targeting rules used
  status              String    @default("pending") // "pending", "processing", "completed", "failed"
  scheduledFor        DateTime  @default(now())
  startedAt           DateTime?
  completedAt         DateTime?
  errorMessage        String?
  metadata            Json      @default("{}")
  createdAt           DateTime  @default(now())
  
  // Relationships
  earthquakeEvent     EarthquakeEvent? @relation(fields: [earthquakeEventId], references: [id])
  tsunamiAlert        TsunamiAlert?    @relation(fields: [tsunamiAlertId], references: [id])
  deliveryLogs        DeliveryLog[]
  
  @@map("alert_jobs")
}

// Individual delivery tracking
model DeliveryLog {
  id                String    @id @default(cuid())
  alertJobId        String
  contactId         String
  channel           String    // "sms", "email", "whatsapp", "voice"
  provider          String    // "twilio", "sendgrid"
  status            String    // "queued", "sent", "delivered", "failed", "bounced"
  providerMessageId String?
  errorMessage      String?
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  createdAt         DateTime  @default(now())

  // Relationships
  alertJob          AlertJob  @relation(fields: [alertJobId], references: [id], onDelete: Cascade)
  contact           Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("delivery_logs")
}

// System audit logs
model AuditLog {
  id          String    @id @default(cuid())
  userId      String?   // operator ID
  action      String
  resource    String
  resourceId  String?
  metadata    Json      @default("{}")
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  
  @@map("audit_logs")
}

// Simple alert log used by POC endpoints and dashboard
model AlertLog {
  id               String   @id @default(cuid())
  earthquakeId     String
  magnitude        Float
  location         String
  latitude         Float?
  longitude        Float?
  depth            Float?
  timestamp        DateTime @default(now())
  contactsNotified Int      @default(0)
  success          Boolean  @default(false)
  errorMessage     String?
  createdAt        DateTime @default(now())

  @@map("alert_logs")
}

// Cache of earthquakes used for deduplication
model EarthquakeCache {
  id           String   @id @default(cuid())
  earthquakeId String   @unique
  magnitude    Float
  location     String
  latitude     Float?
  longitude    Float?
  depth        Float?
  timestamp    DateTime
  processed    Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@map("earthquake_cache")
}

// Voice call records
model VoiceCall {
  id           String    @id @default(cuid())
  callSid      String    @unique
  phoneNumber  String
  alertType    String    // tsunami-warning, earthquake, test, etc.
  status       String    // queued, ringing, in-progress, completed, failed, etc.
  duration     Int?      // call duration in seconds
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  
  @@map("voice_calls")
}

// Bulk call job records
model BulkCallJob {
  id               String   @id @default(cuid())
  alertType        String
  totalContacts    Int
  successfulCalls  Int
  failedCalls      Int
  customMessage    String?
  createdAt        DateTime @default(now())
  
  @@map("bulk_call_jobs")
}

// System-wide settings stored as a single JSON document
model SystemSettings {
  id        String   @id @default("global")
  settings  Json     @default("{}")
  updatedAt DateTime @updatedAt
  updatedBy String?

  @@map("system_settings")
}

// Health monitoring snapshots for time-series charts
enum HealthService {
  database
  redis
  sms
  email
  usgs
  noaa
  whatsapp
  voice
}

enum HealthStatus {
  healthy
  warning
  critical
}

model HealthSnapshot {
  id        String        @id @default(cuid())
  service   HealthService
  status    HealthStatus
  latencyMs Int?
  error     String?
  createdAt DateTime      @default(now())

  @@index([service, createdAt])
  @@map("health_snapshots")
}

// Health events for status page timeline
enum HealthEventType {
  status_change
  error
  recovery
  deploy
}

model HealthEvent {
  id          String          @id @default(cuid())
  service     HealthService?
  eventType   HealthEventType
  severity    HealthStatus    @default(warning)
  message     String
  oldStatus   HealthStatus?
  newStatus   HealthStatus?
  metadata    Json            @default("{}")
  createdAt   DateTime        @default(now())

  @@index([createdAt])
  @@index([service, createdAt])
  @@map("health_events")
}

model MaintenanceWindow {
  id               String   @id @default(cuid())
  title            String
  description      String?
  startTime        DateTime
  endTime          DateTime
  affectedServices String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([startTime, endTime])
  @@map("maintenance_windows")
}
